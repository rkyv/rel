window.SIDEBAR_ITEMS = {"derive":[["Singleton","Derives `Singleton` on the annotated type."],["Unique","Derives `Unique` on the annotated type."]],"fn":[["layout_of_val_raw","Returns the layout of the value pointed to by the given pointer."]],"macro":[["lease_static","Creates a type that provides safe access to a static variable using a unique value."],["runtime_token","Creates a token with a fresh type that is checked for uniqueness at runtime."],["split_unique","Splits a unique value into several others."]],"struct":[["Frame","A box that may be uninitialized."],["GhostRef","A “ghost” reference that is guaranteed to be zero-sized and obey borrowing and ownership semantics"],["In","A pointer which has its pointee in a specific memory region."],["Lease","A lease on a static memory location for a statically-checked lifetime."],["RuntimeTokenError","The runtime token is simultaneously acquired elsewhere."],["Slot","A memory location that may or may not have a value initialized in it."],["StaticRef","A reference to some static value."],["StaticToken","A type of which there can only ever exist one value."]],"trait":[["Metadata","Pointer metadata that can determine the memory layout of its pointee."],["Pointer","A type that points to a single location in memory."],["Region","A contiguous memory region."],["RegionalAllocator","An `Allocator` that allocates inside a single contiguous memory region."],["RestructurablePointer","A `Pointer` that may be restructured with `munge`."],["Singleton","A type which guarantees that all simultaneous values share the same state."],["Static","A type that can lease access to a type without any context."],["Unique","A type which guarantees that only one value can ever exist at a time."],["Within","A pointer that knows where its target is located"]]};